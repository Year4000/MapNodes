/*
 * Copyright 2018 Year4000. All Rights Reserved.
 */

plugins {
  id 'cpp'
  id 'java'
  id 'idea'
  id 'de.undercouch.download' version '3.2.0'
  id 'com.moowork.node' version '1.1.1'
}

dependencies {
  testCompile 'junit:junit:4.12'
  compile 'net.year4000.utilities:core:master-SNAPSHOT'
  compile 'com.google.inject:guice:4.0'
  compile 'com.flowpowered:flow-math:1.0.3'
  compile 'com.eclipsesource.j2v8:j2v8_linux_x86_64:4.8.0'
  compile 'org.slf4j:slf4j-api:1.7.21'
}

sourceSets.main.resources {
  srcDir "${projectDir}/src/main/js/"
  srcDir "${projectDir}/src/generated/js/"
  srcDir "${projectDir}/build/libs/mapnodes/shared/"
}

sourceSets.test.resources {
  srcDir "${projectDir}/src/test/js/"
}

idea.module {
  sourceDirs += file("${projectDir}/src/main/js/")
  sourceDirs += file("${projectDir}/src/main/jni/")
}

test.testLogging.showStandardStreams = true

// Copy all files to known path
task copyTestJs(type: Copy) {
  from "${projectDir}/src/test/js/"
  from "${projectDir}/src/main/js/"
  from "${projectDir}/src/generated/js/"
  into "${projectDir}/build/test/js/"
}

// Actually Test Node
task testNodeJs(type: NodeTask) {
  script = file("${projectDir}/node_modules/mocha/bin/mocha")
  args = ["${projectDir}/build/test/js/test.js"]
}

// Test the javascript files
task testJs {
  dependsOn 'npmInstall'
  dependsOn 'copyTestJs'
  dependsOn 'testNodeJs'
}

test.dependsOn testJs

node {
  version = '7.7.4'
  download = true
}

// Download and shade Javascript utils that MapNodes needs
task generateJsUtils(dependsOn: 'processResources') {
  def depends = [
    'https://raw.githubusercontent.com/lodash/lodash/4.17.4/dist/lodash.js',
    'https://cdnjs.cloudflare.com/ajax/libs/immutable/3.8.1/immutable.js',
    'https://raw.githubusercontent.com/Olical/EventEmitter/v5.2.2/EventEmitter.js',
    'https://raw.githubusercontent.com/jonnyreeves/js-logger/1.3.0/src/logger.js',
    'https://raw.githubusercontent.com/mrdoob/three.js/r84/build/three.js',
    'https://raw.githubusercontent.com/moment/moment/2.18.1/moment.js',
  ]
  // The task to download all needed libs
  download {
    quiet true
    onlyIfNewer true
    src depends
    dest "${projectDir}/src/generated/js/modules/"
  }
}

// todo install v8 within .gradle and compile it
// This ensures the library is generated before packaging the resources to be added to the jar
processResources.dependsOn 'mapnodesSharedLibrary'

// Compile the C++ JNI files for the project
model {
  components {
    mapnodes(NativeLibrarySpec) {
      sources.cpp {
        source {
          srcDir 'src/main/jni'
          include "**/*.cpp"
        }

        // JNI and extra lib header files
        exportedHeaders {
          srcDir "${System.getProperty('java.home')}/../include"
          srcDir "${System.getProperty('java.home')}/../include/darwin"
          srcDir "${System.getProperty('java.home')}/../include/linux"
          srcDir "${projectDir}/.gradle/v8/include"
          srcDir "${projectDir}/.gradle/v8/include/libplatform"
        }
      }

      buildTypes {
        release
      }
    }
  }

  /*
    Raw Command that gets ran at project root, if any problems just use this command.
    Must have v8 cloned and compiled in the .gradle folder within the core sub module.

    g++ -I ./core/.gradle/v8/include -I /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/include -I /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/include/darwin ./core/src/main/jni/net_year4000_mapnodes_v8_V8Engine.cpp -o ./core/build/libs/mapnodes/shared/libmapnodes.dylib -std=c++11 -fPIC -shared -Wl,./core/.gradle/v8/out.gn/x64.release/obj/libv8_lib{base,platform}.a

    clang -I ./core/.gradle/v8/include -I /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/include -I /Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/include/darwin ./core/src/main/jni/net_year4000_mapnodes_v8_V8Engine.cpp -o ./core/build/libs/mapnodes/shared/libmapnodes.dylib -std=c++11 -fPIC -Wl,-undefined -Wl,dynamic_lookup -Wl,./core/.gradle/v8/out.gn/x64.release/obj/libv8_lib{base,platform}.a
   */
  toolChains {
    all {
      eachPlatform {
        cppCompiler.withArguments { args ->
          args << "-std=c++11"
          args << "-fPIC"
        }
        linker.withArguments { args ->
          args << "-shared"
          args << "${projectDir}/.gradle/v8/out.gn/x64.release/obj/libv8_libbase.a"
          args << "${projectDir}/.gradle/v8/out.gn/x64.release/obj/libv8_libplatform.a"
        }
      }
    }
    clang(Clang) {
      eachPlatform {
        linker.withArguments { args ->
          args << "-undefined"
          args << "dynamic_lookup"
        }
      }
    }
  }
}
